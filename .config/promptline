#!/usr/bin/env sh

space=" "
arrFL="ÓÇ∞"
arrFR="ÓÇ≤"
arrEL="ÓÇ±"
arrER="ÓÇ≥"
endARR="ÓÇ±"

function __cpustats() {
    cpu=$(/env/cpp/bin/cpu-stat)
    cpu=${cpu%.*}
    printf $cpu
}

function __memoryuse() {
    mem=$(free | grep Mem | awk '{print (100 - ($4/($3+$4) * 100.0));}')
    mem=${mem%.*}
    printf $mem
}

function __netspeed() {
    [[ -z $INLABEL ]] && INLABEL="‚ñº"
    [[ -z $OUTLABEL ]] && OUTLABEL="‚ñ≤"

    iface=$(ip route | awk '/^default/ { print $5 ; exit }')
    RXB=$(</sys/class/net/"$iface"/statistics/rx_bytes)
    TXB=$(</sys/class/net/"$iface"/statistics/tx_bytes)
    sleep 1
    RXBN=$(</sys/class/net/"$iface"/statistics/rx_bytes)
    TXBN=$(</sys/class/net/"$iface"/statistics/tx_bytes)

    rx_rate=$(echo $((RXBN - RXB)) )
    tx_rate=$(echo $((TXBN - TXB)) )

    # incoming
    echo -n "$INLABEL"
    rx_kib=$(( $rx_rate >> 10 ))
    if [[ "$rx_rate" -gt 1048576 ]]; then
    printf '%sM' "`echo "scale=1; $rx_kib / 1024" | bc`"
    else
    echo -n "${rx_kib}K"
    fi
    echo -n " "
    # outgoing
    echo -n "$OUTLABEL"
    tx_kib=$(( $tx_rate >> 10 ))
    if [[ "$tx_rate" -gt 1048576 ]]; then
    printf '%sM' "`echo "scale=1; $tx_kib / 1024" | bc`"
    else
    echo -n "${tx_kib}K"
    fi
}

function __battery() {
    printf $(acpi | awk '{print $4}' | tr -d '%,')
}

function __timenow() {
    printf $(date +"%H:%M")
}

function __datetoday() {
    printf $(date +"%d.%m.%G")
}

function __uptime() {
    echo $(uptime -p)
}

function preexec() {
    timer=${timer:-$SECONDS}
}

function precmd() {
    if [ $timer ]; then
        export timer_show=$(($SECONDS - $timer))
        unset timer
    fi
}

function __promptline_host {
    printf $(uname -a | cut -d" "  -f2)
}
function __sudo_warning {
    [[ $(trap "" XFSZ; LC_ALL=C sudo -n true 2>&1) != *"password is required" ]] && printf 'SUDO'
}

function __load_average {
    eval loadav01=$(uptime | awk ' {print substr($0,length($0)-15)}' | awk '{print $1}' | sed 's/,//g')
    printf "$loadav01"
}

function __promptline_vcs_branch {
    local branch
    if hash git 2>/dev/null; then
        if branch=$( { git symbolic-ref --quiet HEAD || git rev-parse --short HEAD; } 2>/dev/null ); then
        branch=${branch##*/}
        printf "%s" "${branch:-unknown}"
        return
        fi
    fi
    return 1
}

function __dev_lang {
    if [[ -n $(echo $ENVNAME) ]]; then
        printf " $ENVNAME "
    fi
}

function __is_in_container {
    if [[ -n $(awk -F/ '$2 == "docker"' /proc/self/cgroup) ]]; then
        printf ' ‚äô '
    elif [[ -n $(echo $IN_NIX_SHELL) ]]; then
        printf ' ‚ùÑ '
    fi
}

function __promptline_cwd {
    local dir_limit="3"
    local truncation="‚ãØ"
    local first_char
    local part_count=0
    local formatted_cwd=""
    local dir_sep=" ÓÇ± "
    local tilde="~"
    local cwd="${PWD/#$HOME/$tilde}"
    [[ -n ${ZSH_VERSION-} ]] && first_char=$cwd[1,1] || first_char=${cwd::1}
    cwd="${cwd#\~}"
    while [[ "$cwd" == */* && "$cwd" != "/" ]]; do
        local part="${cwd##*/}"
        cwd="${cwd%/*}"
        formatted_cwd="$dir_sep$part$formatted_cwd"
        part_count=$((part_count+1))
        [[ $part_count -eq $dir_limit ]] && first_char="$truncation" && break
    done
    printf "%s" "$first_char$formatted_cwd"
}

function __truncate_cwd() {
    dir=$(echo "$1" | rev | cut -d'/' -f-$2 | rev)

    if [[ $2 == "1" ]]; then
        if [[ $dir == "" ]]; then echo "/"; else echo $dir; fi
    else
        if [[ $dir =~ ^/ ]]; then echo $dir; else echo /$dir; fi
    fi
}

function __promptline_left_prompt {
    #HOST
    prefix="${light_TX}${dark_BG}${space}" suffix="${space}${blackBG}${dark_TX}${arrFL}${blackTX}${accentBG}"; printf "%s" "$prefix" "$(__promptline_host)" "$suffix"
    #CONTAINER
    prefix="${blackTX}${dark_BG}${arrFL}${light_TX}${dark_BG}" suffix="${dark_TX}"; [[ -n $(__is_in_container) ]] && printf "%s" "$prefix" "$(__is_in_container)" "$suffix"
    #USER
    prefix="${accentBG}${arrFL}${blackTX}${dark_TX}${space}" suffix="${space}${accentTX}"; printf "%s" "$prefix" "$USER" "$suffix"
    #SUDO WARN
    prefix="${redBG}${arrFL}${blackTX}${redBG}${space}" suffix="${space}${redTX}"; [[ -n $(__sudo_warning) ]] && printf "%s" "$prefix" "$(__sudo_warning)" "$suffix"
    #DEVSHELL
    prefix="${blackBG}${arrFL}${blackTX}${dark_BG}${arrFL}${light_TX}${dark_BG}" suffix="${dark_TX}"; [[ -n $(__dev_lang) ]] && printf "%s" "$prefix" "$(__dev_lang)" "$suffix"
    [[ -n $(__is_in_container) ]] && endARR="$arrEL$redBG$blackTX$arrFL$redBG$redTX$blackBG$arrFL$greyTX"
    #PATH
    [[ $(__promptline_vcs_branch) = "master" ]] && conTX=$accentTX
    prefix="${defaultBG}${arrFL}${conTX}${space}" suffix="${space}${conTX}${arrEL}${greyTX}${space}"; [[ -n $(__promptline_cwd) ]] && printf "%s" "$prefix" "$(__promptline_cwd)" "$suffix"
}

function __promptline_right_prompt {
    #WARN
    prefix="${space}${redTX}${arrFR}${redBG}${blackTX}" suffix="${space}${blackTX}${arrFR}${greyTX}${blackBG}"; [[ $last_exit_code -gt 0 ]] && printf "%s" "$prefix " $last_exit_code "$suffix"
    #GIT
    [[ $(__promptline_vcs_branch) = "master" ]] && conTX=$accentTX
    prefix="${conTX}${arrER}${space}" suffix="${space}${greyTX}";
    if [[ -n $(__promptline_vcs_branch) ]]; then
        if [[ -n ${ZSH_VERSION-} ]]; then
            printf "%s" "$prefix${conTX}" '$GITSTATUS_PROMPT' "$suffix"
        elif [[ -n ${FISH_VERSION-} ]]; then
            printf "%s" "$prefix${defaultFG}" "$(echo $3)" "$suffix"
        fi
    fi
    #CMD TIME
    prefix="${accentTX}${arrER}${arrFR}${dark_TX}${accentBG}${space}" suffix="${space}${blackTX}${arrER}"; [[ -n $timer_show ]] && printf "%s" "$prefix" "$timer_show" "$suffix"
    #LOAD AVERAGE
    prefix="${accentTX}${arrFR}${dark_TX}${accentBG}${space}" suffix="${space}${whiteTX}"; printf "%s" "$prefix" "$(__load_average)" "$suffix"
    #VIM MODE
    prefix="${dark_TX}${arrFR}${light_TX}${dark_BG}${space}" suffix="${space}${defaultBG}${defaultFG}";
    if [[ -n ${ZSH_VERSION-} ]]; then
        vimode='${${KEYMAP/vicmd/NORMAL}/(main|viins)/INSERT}'
        printf "%s" "$prefix" $vimode "$suffix"
    elif [[ -n ${FISH_VERSION-} ]]; then
        [[ $2 = "default" ]] && vimode="NORMAL" || vimode="INSERT"
        printf "%s" "$prefix" "$vimode" "$suffix"
    fi
}

function __tmuxline_right_prompt {
    #WORKING DIR
    prefix="${conTX}${arrER}${space}${defaultFG}" suffix="${space}${greyTX}"; printf "%s" "$prefix" "$(__truncate_cwd $@ 3)" "$suffix"
    #CMD TIME
    prefix="${accentTX}${arrER}${arrFR}${dark_TX}${accentBG}${space}" suffix="${space}${blackTX}${arrER}"; printf "%s" "$prefix" "$(__cpustats)" "$suffix"
    #LOAD AVERAGE
    prefix="${accentTX}${arrFR}${dark_TX}${accentBG}${space}" suffix="${space}${whiteTX}"; printf "%s" "$prefix" "$(__memoryuse)" "$suffix"
    #BATTERY
    [[ $(acpi | awk '{print $3}' | tr -d '%,') == "Discharging" ]] && conTX=$redTX || conTX=$light_TX
    prefix="${accentBG}${blackTX}${arrFR}${blackBG}${dark_TX}${arrFR}${light_TX}${dark_BG}${space}$conTXÔÉß${space}" suffix="${space}";printf "%s" "$BLD$prefix" "$(__battery)" "$suffix"
}

function __tmuxline_left_prompt {
    #TIME
    prefix="${light_TX}${dark_BG}${space}" suffix="${space}${dark_TX}"; printf "%s" "$BLD$prefix" "$(__timenow)" "$suffix$NLD"
    #UPTIME
    prefix="${accentBG}${arrFL}${blackTX}${dark_TX}${space}" suffix="${space}${accentTX}"; printf "%s" "$prefix" "$(__datetoday)" "$suffix"
    #UPTIME
    prefix="${defaultBG}${arrFL}${conTX}${space}" suffix="${space}${conTX}${arrEL}${greyTX}${space}"; printf "%s" "$prefix" "$(__uptime)" "$suffix"

}

function __tmuxline_center_prompt {
    if [[  $1 == "active" ]]; then 
        prefix="${accentTX}${arrFR}${dark_TX}${accentBG}${space}" suffix="${space}${accentTX}${defaultBG}${arrFL}";
    else
        prefix="${dark_TX}${space}" suffix="${space}${defaultTX}";
    fi
    printf "%s" "$prefix" "$(basename $2)" "$suffix"
}


function __one_line_prompt {
    LEFTPROMPT=$(echo __promptline_left_prompt | wc -m)
    size_left=${#LEFTPROMPT}
    __promptline_left_prompt
    RIGHTPROMPT=$(echo __promptline_right_prompt | sed 's/[\x01-\x1F\x7F]//g')
    size_right=${#RIGHTPROMPT}
    __promptline_right_prompt
    echo $LEFTPROMPT
    echo $size_right
}
function __emptyline() {
    echo
}
function __breakline() {
    COLS="${COLUMNS:-10}"
    local WORD="‚îÄ"
    if [[ -n "$WORD" ]] ; then
        local LINE=''
        while (( ${#LINE} < COLS ))
        do
            LINE="$LINE$WORD"
        done
        echo "\e[38;5;7m${LINE:0:$COLS}\e[0m"
    fi
}

function __promptline {
    last_exit_code="${PROMPTLINE_LAST_EXIT_CODE:-$?}"
    esc=$'['
    end_esc=m

    if [[ -n ${ZSH_VERSION-} ]]; then
        local noprint='%{' end_noprint='%}'
    elif [[ -n ${FISH_VERSION-} ]]; then
        local noprint='' end_noprint=''
    else
        local noprint='\[' end_noprint='\]'
    fi

    local IN="$noprint$esc"
    local EN="$end_esc$end_noprint"

    local blackBG="${IN}48;5;0${EN}"
    local blackTX="${IN}38;5;0${EN}"
    local whiteBG="${IN}48;5;15${EN}"
    local whiteTX="${IN}38;5;15${EN}"
    local dark_BG="${IN}48;5;250${EN}"
    local dark_TX="${IN}38;5;250${EN}"
    local light_BG="${IN}48;5;237${EN}"
    local light_TX="${IN}38;5;237${EN}"
    local accentBG="${IN}48;5;1${EN}"
    local accentTX="${IN}38;5;1${EN}"
    local redTX="${IN}38;5;22${EN}"
    local redBG="${IN}48;5;22${EN}"
    local greyBG="${IN}48;5;7${EN}"
    local greyTX="${IN}38;5;7${EN}"
    local defaultFG="${IN}0${EN}"
    local defaultBG="${IN}49${EN}"
    local conTX=$greyTX
    local BLD=$(tput bold)
    local NLD=$(tput sgr0)


    if [[ -n ${ZSH_VERSION-} ]]; then
        # PROMPT="$(__one_line_prompt)"
        PROMPT="$(__promptline_left_prompt)"
        RPROMPT=" $(__promptline_right_prompt)"
    elif [[ -n ${FISH_VERSION-} ]]; then
        if [[ -n "$1" ]]; then
            [[ "$1" = "left" ]] && __promptline_left_prompt || __promptline_right_prompt $@
        else
            __promptline_left_prompt
        fi
    else
        PS1="$(__promptline_left_prompt)"
    fi
}

function __tmuxline() {
    local blackTX="#[fg=colour0]"
    local blackBG="#[bg=colour0]"
    local whiteTX="#[fg=colour15]"
    local whiteBG="#[bg=colour15]"
    local dark_BG="#[bg=colour250]"
    local dark_TX="#[fg=colour250]"
    local light_BG="#[bg=colour237]"
    local light_TX="#[fg=colour237]"
    local accentBG="#[bg=colour1]"
    local accentTX="#[fg=colour1]"
    local redBG="#[bg=colour22]"
    local redTX="#[fg=colour22]"
    local greyBG="#[bg=colour7]"
    local greyTX="#[fg=colour7]"
    local defaultBG="#[bg=default]"
    local defaultTX="#[fg=default]"
    local conTX=$greyTX
    local BLD="#[bold]"
    local NLD="#[nobold]"

    if [[  $1 == "left" ]]; then 
        __tmuxline_left_prompt "${@:2}"
    elif [[  $1 == "right" ]]; then 
        __tmuxline_right_prompt "${@:2}"
    elif [[  $1 == "center" ]]; then 
        __tmuxline_center_prompt "${@:2}"
    fi
}


if [[  $1 != "tmux" ]]; then
  if [[ -n ${ZSH_VERSION-} ]]; then
    if [[ ! ${precmd_functions[(r)__promptline]} == __promptline ]]; then
      precmd_functions+=(__promptline)
      precmd_functions+=(__emptyline)
    fi
  elif [[ -n ${FISH_VERSION-} ]]; then
    __promptline "$@"
  else
    if [[ ! "$PROMPT_COMMAND" == *__promptline* ]]; then
      PROMPT_COMMAND='__promptline;'$'\n'"$PROMPT_COMMAND"
    fi
  fi
elif [[  $1 == "tmux" ]]; then
    __tmuxline "${@:2}"
fi
