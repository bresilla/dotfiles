#!/usr/bin/env bash
if [ ! -d $HOME/.cache/wal ]; then
  mkdir -p $HOME/.cache/wal;
fi

colors() {
    local wallpaper=$(cat /home/bresilla/.cache/wal/wallpaper)
    if [[ $1 == "schemer2" ]]; then
        /env/go/bin/schemer2 -format img::colors -in $wallpaper > /tmp/colorz 
    elif [[ $1 == "imagemagick" ]]; then
        /usr/bin/convert $wallpaper +dither -colors 16 -unique-colors txt: | tail -n +2 | cut -d" " -f4 | tac  > /tmp/colorz
    elif [[ $1 == "imgscheme" ]]; then
        /env/go/bin/imgscheme $wallpaper > /tmp/colorz
    else
        /env/cargo/bin/pigmnts -c 16 $wallpaper -q > /tmp/colorz
    fi
}


if [[ $1 == "wall" ]]; then
    echo $(find /home/bresilla/sets/.wallpaper -maxdepth 1 | shuf -n 1) > $HOME/.cache/wal/wallpaper
    colors
    cat /tmp/colorz | /env/cargo/bin/pastel sort-by -r chroma | head -n 1 | /env/cargo/bin/pastel format hex > /tmp/rainbow

elif [[ $1 == "regen" ]]; then
    colors $2
    cat /tmp/colorz | /env/cargo/bin/pastel sort-by -r chroma | head -n 1 | /env/cargo/bin/pastel format hex > /tmp/rainbow

elif [[ $1 == "pick" ]]; then
    ac=$(/env/cargo/bin/pastel -f pick | /env/cargo/bin/pastel format hex)
    [[ -z $ac ]] && exit
    echo $ac > /tmp/rainbow

elif [[ $1 == "theme" ]]; then
    [[ $(cat $HOME/.cache/wal/theme) == "dark" ]] && echo light > $HOME/.cache/wal/theme || echo dark > $HOME/.cache/wal/theme
    cat /tmp/colorz | /env/cargo/bin/pastel sort-by -r chroma | head -n 1 | /env/cargo/bin/pastel format hex > /tmp/rainbow
fi


cat /tmp/colorz | /env/cargo/bin/pastel -f saturate 0.1 | /env/cargo/bin/pastel sort-by -r chroma | head -n 6 | tail -n 5 | /env/cargo/bin/pastel format hex >> /tmp/rainbow



### === LIGHT & DARK THEME ===
if [ $(cat $HOME/.cache/wal/theme) == "light" ] ; then
    ac=$(cat /tmp/rainbow | head -n 1 | /env/cargo/bin/pastel set hsl-lightness 0.3 | /env/cargo/bin/pastel format hex)
    echo light > $HOME/.cache/wal/theme
else
    ac=$(cat /tmp/rainbow | head -n 1 | /env/cargo/bin/pastel set hsl-lightness 0.7 | /env/cargo/bin/pastel format hex)
    echo dark > $HOME/.cache/wal/theme
fi



### === COLOR-GENERATION ===
col0=$(/env/cargo/bin/pastel -f mix $ac -f 0.08 "#000000" | /env/cargo/bin/pastel format hex)
col1=$(echo $ac | /env/cargo/bin/pastel -f saturate 0.1 | /env/cargo/bin/pastel format hex)
col7=$(/env/cargo/bin/pastel -f mix $ac -f 0.2 "#aaaaaa" | /env/cargo/bin/pastel format hex)
col8=$(/env/cargo/bin/pastel -f mix $ac -f 0.2 "#666666" | /env/cargo/bin/pastel format hex)
col15=$(/env/cargo/bin/pastel -f mix $ac -f 0.12 "#ffffff" | /env/cargo/bin/pastel format hex)
# additional color generation (mix between accent and primary colors)
redish=$(/env/cargo/bin/pastel -f mix $ac -f 0.5 "#ff0000" | /env/cargo/bin/pastel -f saturate 0.2)
blueish=$(/env/cargo/bin/pastel -f mix $ac -f 0.5 "#0000ff" | /env/cargo/bin/pastel -f saturate 0.2)
greenish=$(/env/cargo/bin/pastel -f mix $ac -f 0.5 "#00ff00"| /env/cargo/bin/pastel -f saturate 0.2)



### === LIGHT & DARK THEME ===
if [ $(cat $HOME/.cache/wal/theme) == "light" ] ; then
    white=#000000 
    black=#ffffff 
    back=$col15 
    fore=$col0
else
    black=#000000
    white=#ffffff
    back=$col0
    fore=$col15
fi



### === COLOR-CONCATINATION ===
#concatinating main colors (colors 0-15)
echo $back > $HOME/.cache/wal/colors
echo $col1 >> $HOME/.cache/wal/colors
cat /tmp/rainbow | tail -n 5 | /env/cargo/bin/pastel -f mix -f 0.2 $fore | /env/cargo/bin/pastel format hex >> $HOME/.cache/wal/colors
echo $col7 >> $HOME/.cache/wal/colors
echo $col8 >> $HOME/.cache/wal/colors
cat /tmp/rainbow | /env/cargo/bin/pastel -f mix -f 0.2 $back | /env/cargo/bin/pastel format hex >> $HOME/.cache/wal/colors
echo $fore >> $HOME/.cache/wal/colors
#generating shades of each additional color (colors 16-51)
/env/cargo/bin/pastel -f gradient $back $redish $fore -n 14 | xargs -0 | head -n -2 | tail -n +2 | /env/cargo/bin/pastel format hex >> $HOME/.cache/wal/colors
/env/cargo/bin/pastel -f gradient $back $greenish $fore -n 14 | xargs -0 | head -n -2 | tail -n +2 | /env/cargo/bin/pastel format hex >> $HOME/.cache/wal/colors
/env/cargo/bin/pastel -f gradient $back $blueish $fore -n 14 | xargs -0 | head -n -2 | tail -n +2 | /env/cargo/bin/pastel format hex >> $HOME/.cache/wal/colors
#generating shades of each additional color (colors 52-135)
/env/cargo/bin/pastel -f gradient $back '#ff0000' $fore -n 14 | xargs -0 | head -n -2 | tail -n +2 | /env/cargo/bin/pastel format hex >> $HOME/.cache/wal/colors
/env/cargo/bin/pastel -f gradient $back '#00ff00' $fore -n 14 | xargs -0 | head -n -2 | tail -n +2 | /env/cargo/bin/pastel format hex >> $HOME/.cache/wal/colors
/env/cargo/bin/pastel -f gradient $back '#0000ff' $fore -n 14 | xargs -0 | head -n -2 | tail -n +2 | /env/cargo/bin/pastel format hex >> $HOME/.cache/wal/colors
/env/cargo/bin/pastel -f gradient $back '#ff00ff' $fore -n 14 | xargs -0 | head -n -2 | tail -n +2 | /env/cargo/bin/pastel format hex >> $HOME/.cache/wal/colors
/env/cargo/bin/pastel -f gradient $back '#ffff00' $fore -n 14 | xargs -0 | head -n -2 | tail -n +2 | /env/cargo/bin/pastel format hex >> $HOME/.cache/wal/colors
/env/cargo/bin/pastel -f gradient $back '#00ffff' $fore -n 14 | xargs -0 | head -n -2 | tail -n +2 | /env/cargo/bin/pastel format hex >> $HOME/.cache/wal/colors
/env/cargo/bin/pastel -f gradient $back '#888888' $fore -n 14 | xargs -0 | head -n -2 | tail -n +2 | /env/cargo/bin/pastel format hex >> $HOME/.cache/wal/colors
#generating shades of each additional color (colors 136-196)
/env/cargo/bin/pastel -f gradient $back $(/env/cargo/bin/pastel -f random -n 1) $fore -n 14 | xargs -0 | head -n -2 | tail -n +2 | /env/cargo/bin/pastel format hex >> $HOME/.cache/wal/colors
/env/cargo/bin/pastel -f gradient $back $(/env/cargo/bin/pastel -f random -n 1) $fore -n 14 | xargs -0 | head -n -2 | tail -n +2 | /env/cargo/bin/pastel format hex >> $HOME/.cache/wal/colors
/env/cargo/bin/pastel -f gradient $back $(/env/cargo/bin/pastel -f random -n 1) $fore -n 14 | xargs -0 | head -n -2 | tail -n +2 | /env/cargo/bin/pastel format hex >> $HOME/.cache/wal/colors
/env/cargo/bin/pastel -f gradient $back $(/env/cargo/bin/pastel -f random -n 1) $fore -n 14 | xargs -0 | head -n -2 | tail -n +2 | /env/cargo/bin/pastel format hex >> $HOME/.cache/wal/colors
/env/cargo/bin/pastel -f gradient $back $(/env/cargo/bin/pastel -f random -n 1) $fore -n 14 | xargs -0 | head -n -2 | tail -n +2 | /env/cargo/bin/pastel format hex >> $HOME/.cache/wal/colors
/env/cargo/bin/pastel -f gradient $back $(/env/cargo/bin/pastel -f random -n 1) $fore -n 14 | xargs -0 | head -n -2 | tail -n +2 | /env/cargo/bin/pastel format hex >> $HOME/.cache/wal/colors
/env/cargo/bin/pastel -f gradient $back $(/env/cargo/bin/pastel -f random -n 1) $fore -n 14 | xargs -0 | head -n -2 | tail -n +2 | /env/cargo/bin/pastel format hex >> $HOME/.cache/wal/colors
/env/cargo/bin/pastel -f gradient $back $(/env/cargo/bin/pastel -f random -n 1) $fore -n 14 | xargs -0 | head -n -2 | tail -n +2 | /env/cargo/bin/pastel format hex >> $HOME/.cache/wal/colors
#generating gradients (colors 232-255)
/env/cargo/bin/pastel -f gradient $black $back -n 3 | xargs -0 | head -n -1 | /env/cargo/bin/pastel format hex >> $HOME/.cache/wal/colors 
/env/cargo/bin/pastel -f gradient $back $col1 $fore -n 18 | xargs -0 | head -n -1 | /env/cargo/bin/pastel format hex >> $HOME/.cache/wal/colors 
/env/cargo/bin/pastel -f gradient $fore $white -n 3 | xargs -0 | head -n -1 | /env/cargo/bin/pastel format hex >> $HOME/.cache/wal/colors 




### === PRINTING THINGS TO FILES === ###
wallpaper=$(cat /home/bresilla/.cache/wal/wallpaper)
theme=$(cat /home/bresilla/.cache/wal/theme)
# COLORS.SH (used by shells - bash,zsh,fish...)
printf "foreground=\"$fore\"\nbackground=\"$back\"\ncursor=\"$col1\"\n" > $HOME/.cache/wal/colors.sh
awk '{print "color" NR-1 "=\"" $0 "\""}' $HOME/.cache/wal/colors >> $HOME/.cache/wal/colors.sh

# COLORS.YAML (used by ALACRITY)
printf "special:\n\tbackground: \"$back\"\n\tforeground: \"$fore\"\n\tcursor: \"$col1\"\n\ncolors:\n" > $HOME/.cache/wal/colors.yml
awk '{print "\tcolor" NR-1 ": \"" $0 "\""}' $HOME/.cache/wal/colors >> $HOME/.cache/wal/colors.yml

# COLORS.JSON (used by FREFOX)
printf "{\n\t\"wallpaper\": \"$wallpaper\",\n\t\"theme\": \"$theme\",\n" > $HOME/.cache/wal/colors.json
printf "\t\"special\": {\n\t\t\"background\": \"$back\",\n\t\t\"foreground\": \"$fore\",\n\t\t\"cursor\": \"$col1\"\n\t},\n\t\"colors\": {\n" >> $HOME/.cache/wal/colors.json
awk '{print "\t\t\"color" NR-1 "\": \"" $0 "\","}' $HOME/.cache/wal/colors >> $HOME/.cache/wal/colors.json
truncate -s-2 $HOME/.cache/wal/colors.json; printf "\n\t}\n}" >> $HOME/.cache/wal/colors.json

# COLORS.INI (used by POLYBAR)
printf "[colors]\n\tforeground=$fore\n\tbackground=$back\n\tcursor=$col1\n" > $HOME/.cache/wal/colors.ini
awk '{print "\tcolor" NR-1 "=" $0 }' $HOME/.cache/wal/colors >> $HOME/.cache/wal/colors.ini

# COLORS.CONF (used by KITTY)
printf "foreground\t$fore\nbackground\t$back\ncursor\t$col1\n\n" > $HOME/.cache/wal/colors.conf
awk '{print "color" NR-1 "\t " $0}' $HOME/.cache/wal/colors >> $HOME/.cache/wal/colors.conf

# SEQUENCES (escape codes sent to all '/dev/pts/*')
printf "]10;$fore\\]11;$back\\]12;$col1\\]13;$back\\]17;$col1\\]19;$back\\" > $HOME/.cache/wal/sequences
awk '{print "]4;" NR-1 ";" $0"\\"}' ORS='' $HOME/.cache/wal/colors >> $HOME/.cache/wal/sequences
for tt in /dev/pts/*; do re='^[0-9]+$'; [[ $(basename $tt) =~ $re ]] && /usr/bin/cat ~/.cache/wal/sequences >$tt; done &



### === UPDATE WALLPAPER & COLORS (external script) === ###
feh --no-fehbg --bg-scale $wallpaper &
bash /home/bresilla/dots/.func/wm/colupd &
